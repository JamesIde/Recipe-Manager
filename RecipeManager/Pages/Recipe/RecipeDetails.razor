@page "/recipe/details/{Id:int}"

@page "/recipe/create"

@using DataAccess.Model
@using Services

@inject IRecipeService RecipeService
@inject IToastService ToastService
@inject NavigationManager NavigationManager

<div class="container d-flex justify-content-center m-0 p-0">

    <EditForm Model="Recipe" OnValidSubmit="@HandleValidSubmit" class="col-sm-12 col-md-10 col-lg-8 p-0">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label for "title">Title</label>
            <InputText id="title" @bind-Value="@Recipe.Title" class="form-control" placeholder="Green Curry" />
        </div>

        <div class="form-group">
            <label for "description">Description</label>
            <InputTextArea id="description" @bind-Value="@Recipe.Description" class="form-control" placeholder="Salt your water before adding your pasta" rows="5" />
        </div>

        <div class="form-group">
            <button type="submit" class="btn btn-sm btn-primary" hidden="@(Id == null)"><i class="fas fa-save pr-2"></i>Save</button>
            <button type="submit" class="btn btn-sm btn-success" hidden="@(Id != null)"><i class="fas fa-plus pr-2"></i>Create</button>

            <a href="/recipes" class="btn btn-sm btn-secondary"><i class="fas fa-times pr-2"></i>Cancel</a>

            <button type="button" class="btn btn-sm btn-danger float-right" hidden="@(Id == null)" @onclick="async () => await Delete(Recipe.Id)"><i class="fas fa-trash pr-2"></i>Delete</button>
        </div>
        @if (Id != null)
        {
            <hr />
            <b>Date Created:</b>
            <p>@Recipe.DateCreated</p>
            <b>Date Updated:</b>
            <p>@Recipe.DateUpdated</p>

        }
        else
        {
        }

    </EditForm>
</div>
@code {
    [Parameter]
    public int? Id { get; set; }

    public Recipe Recipe = new Recipe();


    protected override async Task OnInitializedAsync()
    {
        if (Id != null)
        {
            Recipe = RecipeService.Get(Id.Value);
        }
    }

    private void HandleValidSubmit()
    {
        try
        {
            if (Id != null)
            {
                // We want to update the recipe - Therefore a recipe must exist.
                RecipeService.Update(Recipe);
            }
            else
            {
                //Seeing as there is no recipe, we want to call the Create nethod and then navigate to that newly created recipe to edit it.
                Recipe newRecipe = RecipeService.Create(Recipe);
                NavigationManager.NavigateTo($"/recipe/details/{newRecipe.Id}");
            }

            ToastService.ShowSuccess("Recipe successfully saved!", "Success");
        }
        catch (Exception)
        {
            ToastService.ShowError("Recipe could not be saved. Something went wrong!", "Error");
        }
    }

    private async Task Delete(int Id)
    {
        if (Id != null)
        {
            RecipeService.Delete(Recipe.Id);
            NavigationManager.NavigateTo("/recipes");
        }
    }

}
